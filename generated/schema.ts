// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BetSettledEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BetSettledEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetSettledEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BetSettledEntity", id.toString(), this);
    }
  }

  static load(id: string): BetSettledEntity | null {
    return changetype<BetSettledEntity | null>(
      store.get("BetSettledEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get first(): BigInt {
    let value = this.get("first");
    return value!.toBigInt();
  }

  set first(value: BigInt) {
    this.set("first", Value.fromBigInt(value));
  }

  get second(): BigInt {
    let value = this.get("second");
    return value!.toBigInt();
  }

  set second(value: BigInt) {
    this.set("second", Value.fromBigInt(value));
  }

  get third(): BigInt {
    let value = this.get("third");
    return value!.toBigInt();
  }

  set third(value: BigInt) {
    this.set("third", Value.fromBigInt(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value!.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get requestId(): BigInt {
    let value = this.get("requestId");
    return value!.toBigInt();
  }

  set requestId(value: BigInt) {
    this.set("requestId", Value.fromBigInt(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value!.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BetPlacedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BetPlacedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetPlacedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BetPlacedEntity", id.toString(), this);
    }
  }

  static load(id: string): BetPlacedEntity | null {
    return changetype<BetPlacedEntity | null>(store.get("BetPlacedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betAmount(): BigInt {
    let value = this.get("betAmount");
    return value!.toBigInt();
  }

  set betAmount(value: BigInt) {
    this.set("betAmount", Value.fromBigInt(value));
  }

  get requestId(): BigInt {
    let value = this.get("requestId");
    return value!.toBigInt();
  }

  set requestId(value: BigInt) {
    this.set("requestId", Value.fromBigInt(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value!.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BetsStatisticsForAddressEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BetsStatisticsForAddressEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetsStatisticsForAddressEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BetsStatisticsForAddressEntity", id.toString(), this);
    }
  }

  static load(id: string): BetsStatisticsForAddressEntity | null {
    return changetype<BetsStatisticsForAddressEntity | null>(
      store.get("BetsStatisticsForAddressEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalBets(): i32 {
    let value = this.get("totalBets");
    return value!.toI32();
  }

  set totalBets(value: i32) {
    this.set("totalBets", Value.fromI32(value));
  }

  get totalBetsVolume(): BigInt {
    let value = this.get("totalBetsVolume");
    return value!.toBigInt();
  }

  set totalBetsVolume(value: BigInt) {
    this.set("totalBetsVolume", Value.fromBigInt(value));
  }

  get totalRewardsVolume(): BigInt {
    let value = this.get("totalRewardsVolume");
    return value!.toBigInt();
  }

  set totalRewardsVolume(value: BigInt) {
    this.set("totalRewardsVolume", Value.fromBigInt(value));
  }
}

export class BetsStatisticsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BetsStatisticsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetsStatisticsEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BetsStatisticsEntity", id.toString(), this);
    }
  }

  static load(id: string): BetsStatisticsEntity | null {
    return changetype<BetsStatisticsEntity | null>(
      store.get("BetsStatisticsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get players(): Array<Bytes> {
    let value = this.get("players");
    return value!.toBytesArray();
  }

  set players(value: Array<Bytes>) {
    this.set("players", Value.fromBytesArray(value));
  }

  get playersCount(): i32 {
    let value = this.get("playersCount");
    return value!.toI32();
  }

  set playersCount(value: i32) {
    this.set("playersCount", Value.fromI32(value));
  }

  get totalBets(): i32 {
    let value = this.get("totalBets");
    return value!.toI32();
  }

  set totalBets(value: i32) {
    this.set("totalBets", Value.fromI32(value));
  }

  get totalBetsVolume(): BigInt {
    let value = this.get("totalBetsVolume");
    return value!.toBigInt();
  }

  set totalBetsVolume(value: BigInt) {
    this.set("totalBetsVolume", Value.fromBigInt(value));
  }

  get totalRewardsVolume(): BigInt {
    let value = this.get("totalRewardsVolume");
    return value!.toBigInt();
  }

  set totalRewardsVolume(value: BigInt) {
    this.set("totalRewardsVolume", Value.fromBigInt(value));
  }
}
